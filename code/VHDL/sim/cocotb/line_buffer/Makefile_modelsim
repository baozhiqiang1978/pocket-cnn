CWD=$(shell pwd)

# TODO: remove absolute path -> problem when running ghdl
VHDL_DIR=/home/workspace/opencnn/code/VHDL/src
COCOTB_ROOT=/home/prog/cocotb
# suppress most of the cocotb log
export COCOTB_REDUCED_LOG_FMT=1

SIM=ghdl
CMD_BIN=ghdl
OPT=-O3
GHDL_ARGS=-g $(OPT) -P$(CWD)/util --ieee=synopsys --std=08

# --vcd slows sim down to half speed
# SIM_ARGS+=--ieee-asserts=disable --assert-level=none #--vcd=../test.vcd
SIM_BUILD=work

TOPLEVEL_LANG?=vhdl

VHDL_SOURCES=$(VHDL_DIR)/bram.vhd $(VHDL_DIR)/line_buffer.vhd $(VHDL_DIR)/window_buffer.vhd $(VHDL_DIR)/pool_max.vhd $(VHDL_DIR)/zero_pad.vhd $(VHDL_DIR)/relu.vhd $(VHDL_DIR)/*.vhd

TOPLEVEL=line_buffer
MODULE=$(TOPLEVEL)_cocotb

CUSTOM_SIM_DEPS=$(CWD)/Makefile

# time resolution like vivado standard
VSIM_ARGS=-t 1ps

all: dirs #libs
dirs:
	mkdir -p $(CWD)/work $(CWD)/util #$(CWD)/ieee_proposed

# compile the custom libraries
# libs:
# 	$(CMD_BIN) -a $(OPT) --std=08 --work=util --workdir=util $(VHDL_DIR)/util/*.vhd
# libs:
# 	@echo "vlib util" >> $(SIM_BUILD)/runsim.do
# 	@echo "vmap -c" >> $(SIM_BUILD)/runsim.do
# 	@echo "vmap util util" >> $(SIM_BUILD)/runsim.do
# 	@echo "vcom -util util $(VHDL_DIR)/util/*.vhd" >> $(SIM_BUILD)/runsim.do

include $(COCOTB_ROOT)/makefiles/Makefile.inc
include $(COCOTB_ROOT)/makefiles/Makefile.sim

# override target from cocotb, to force usage of flags -i, -m (previously -a, -e)
# without these flags, the design would be analyzed by filenames alphabetically
# now the design gets analysed hierarchically according to VHDL modules
# analyse: $(VHDL_SOURCES) $(SIM_BUILD)
# 	cd $(SIM_BUILD) && $(CMD) -i $(GHDL_ARGS) --work=$(RTL_LIBRARY) $(VHDL_SOURCES) && $(CMD) -m $(GHDL_ARGS) --work=$(RTL_LIBRARY) $(TOPLEVEL)

# Error (suppressible): (vsim-3197) Load of "libfli.so" failed: libfli.so: wrong ELF class: ELFCLASS64.
# VSIM_ARGS="-suppress 3197"

$(SIM_BUILD)/runsim.do : $(VHDL_SOURCES) $(VERILOG_SOURCES) $(CUSTOM_SIM_DEPS) $(SIM_BUILD)
	@echo "# Autogenerated file" > $@
	@echo "onerror {" >> $@
	@echo "	quit -f -code 1" >> $@
	@echo "}" >> $@
	@echo "if [file exists $(RTL_LIBRARY)] {vdel -lib $(RTL_LIBRARY) -all}" >> $@
	@echo "vlib $(RTL_LIBRARY)" >> $@
	@echo "vmap -c" >> $@
	@echo "vmap $(RTL_LIBRARY) $(RTL_LIBRARY)" >> $@
	@echo "vlib util" >> $(SIM_BUILD)/runsim.do
	@echo "vmap -c" >> $(SIM_BUILD)/runsim.do
	@echo "vmap util util" >> $(SIM_BUILD)/runsim.do
	@echo "vcom -work util $(VHDL_DIR)/util/*.vhd" >> $(SIM_BUILD)/runsim.do
ifneq ($(VHDL_SOURCES),)
	@echo "vcom -work $(RTL_LIBRARY) $(VCOM_ARGS) $(VHDL_SOURCES)" >> $@
endif
ifneq ($(VERILOG_SOURCES),)
	@echo "vlog -work $(RTL_LIBRARY) +define+COCOTB_SIM -sv $(VLOG_ARGS) $(EXTRA_ARGS) $(VERILOG_SOURCES)" >> $@
endif
ifdef SCRIPT_FILE
	@echo "do $(SCRIPT_FILE)" >> $@
endif
	@echo "vsim $(VSIM_ARGS) $(EXTRA_ARGS) $(TOPLEVEL)" >> $@
ifeq ($(WAVES),1)
	@echo "log -recursive /*" >> $@
endif
ifeq ($(GUI),1)
	@echo "add log -r *" >> $@
else
	@echo "onbreak resume" >> $@
	@echo "run -all" >> $@
	@echo "quit" >> $@
endif

ifeq ($(OS),Msys)

# Windows allows the situation where the libstc++ used at link time as
# specified by -L can be different to the one that is used at runtime which
# comes from the first libstdc++ that it finds in the path. As such
# we use the mingw lib used at build time and put this at the start of the path
# before running

MINGW_BIN_DIR = $(shell dirname $(shell which gcc))

EXTRA_LIBS := -lmtipli
EXTRA_LIBDIRS := -L$(MODELSIM_BIN_DIR)
OLD_PATH := $(shell echo "$(PATH)" | sed 's/(/\\(/g' | sed 's/)/\\)/g' | sed 's/ /\\ /g')

LIB_LOAD := PATH=$(MINGW_BIN_DIR):$(OLD_PATH):$(LIB_DIR)
NEW_PYTHONPATH := $(shell echo "$(PYTHONPATH)" | sed -e 's/\\/\//g' -e 's/\([a-zA-Z]\):\//\/\1\//g' -e 's/;/:/g')
else
LIB_LOAD = LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH)
NEW_PYTHONPATH := $(PYTHONPATH)
endif

INT_LIBS := $(COCOTB_VPI_LIB) $(COCOTB_FLI_LIB)

ifneq ($(ARCH),i686)
CMD += -64
endif
